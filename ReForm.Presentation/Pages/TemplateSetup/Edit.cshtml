@page
@model ReForm.Presentation.Pages.TemplateSetup.EditModel
@using ReForm.Core.Models.Enums

<link rel="stylesheet" href="~/css/homepage.css"/>
<link rel="stylesheet" href="~/css/edit.css"/>
<script src="~/js/edit.js" defer></script>

<div class="template-container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">Edit: @Model.Template.Title</h1>
    </div>

    <div id="questions-list" class="row gx-3 gy-4">
        @foreach (var q in Model.Template.Questions)
        {
            var bgClass = q.Type switch
            {
                QuestionTypeEnum.SingleChoice => "bg-question-SingleChoice",
                QuestionTypeEnum.MultipleChoice => "bg-question-MultipleChoice",
                QuestionTypeEnum.Text => "bg-question-Text",
                QuestionTypeEnum.Rating => "bg-question-Rating",
                QuestionTypeEnum.Date => "bg-question-Date",
                _ => ""
            };

            <div class="col-12">
                <div class="question-card @bgClass">
                    <h5>@q.Text</h5>
                    <div class="question-meta">
                        @q.Type.ToString()
                        @(q.IsMandatory ? "Required" : "Optional")
                    </div>

                    <!-- Edit/Delete icons (hidden by default) -->
                    <div class="icons-container ">
                        <button type="button"
                                class="btn btn-sm btn-outline-primary edit-btn"
                                data-id="@q.Id">
                            âœŽ
                        </button>
                        <button type="button"
                                class="btn btn-sm btn-danger delete-btn"
                                data-id="@q.Id">
                            ðŸ—‘
                        </button>
                    </div>

                    @if (q.Type == QuestionTypeEnum.SingleChoice ||
                         q.Type == QuestionTypeEnum.MultipleChoice)
                    {
                        var icon = q.Type == QuestionTypeEnum.SingleChoice
                            ? "&#9675;"
                            : "&#9633;";

                        <div class="options-list-display">
                            @foreach (var opt in q.Options?
                                                     .Split(',', StringSplitOptions.RemoveEmptyEntries)
                                                 ?? Enumerable.Empty<string>())
                            {
                                <div class="option-pill">
                                    <span class="option-icon">
                                        @Html.Raw(icon)
                                    </span>
                                    @opt.Trim()
                                </div>
                            }
                        </div>
                    }
                    else if (q.Type == QuestionTypeEnum.Text)
                    {
                        <input type="text" placeholder="Text input" disabled/>
                    }
                    else if (q.Type == QuestionTypeEnum.Date)
                    {
                        <input type="date" disabled/>
                    }
                    else if (q.Type == QuestionTypeEnum.Rating)
                    {
                        var parts = q.Options?
                            .Split('-', StringSplitOptions.RemoveEmptyEntries);
                        int min = 1, max = 5;

                        if (parts != null && parts.Length == 2
                                          && int.TryParse(parts[0], out var pMin)
                                          && int.TryParse(parts[1], out var pMax))
                        {
                            min = pMin;
                            max = pMax;
                        }

                        if (min < 0) min = 0;
                        if (max < min) max = min;

                        <div class="rating-stars">
                            @for (int i = min; i <= max; i++)
                            {
                                <span class="star">&#9733;</span>
                            }
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Add Question Button -->
        <div class="col-12 d-flex justify-content-center mt-3 mb-4">
            <button id="add-btn"
                    class="btn btn-outline-primary rounded-circle">
                +
            </button>
        </div>

        <!-- Hidden new question form container -->
        <div id="new-question-form-wrapper" class="col-12 d-none">
            <input type="hidden" id="question-id" value="" />
            <div id="new-question-form" class="card p-4">
                <div class="mb-3">
                    <label for="new-text" class="form-label">
                        Question Text
                    </label>
                    <input type="text"
                           class="form-control"
                           id="new-text"/>
                </div>
                <div class="mb-3">
                    <label for="new-type" class="form-label">
                        Question Type
                    </label>
                    <select class="form-select"
                            id="new-type"
                            onchange="toggleNewOptions()">
                        <option value="0">Single Choice</option>
                        <option value="1">Multiple Choice</option>
                        <option value="2">Text</option>
                        <option value="3">Rating</option>
                        <option value="4">Date</option>
                    </select>
                </div>

                <div class="form-check mb-3">
                    <input class="form-check-input"
                           type="checkbox"
                           id="new-mandatory"/>
                    <label class="form-check-label"
                           for="new-mandatory">
                        Required
                    </label>
                </div>

                <div class="mb-3" id="options-container" style="display: none;">
                    <label class="form-label">Options</label>
                    <div id="options-list" class="mb-2"></div>
                    <button class="btn btn-sm btn-secondary"
                            type="button"
                            onclick="addOption()">
                        + Add Option
                    </button>
                </div>

                <div id="rating-range-container" class="mb-3">
                    <label for="rating-min">
                        Rating Range (e.g. 1 to 5):
                    </label>
                    <div class="d-flex gap-2 align-items-center">
                        <input type="number"
                               id="rating-min"
                               class="form-control"
                               placeholder="Min"
                               min="0"/>
                        <span>to</span>
                        <input type="number"
                               id="rating-max"
                               class="form-control"
                               placeholder="Max"
                               min="1"/>
                    </div>
                </div>

                <div class="d-flex justify-content-end gap-2">
                    <button id="cancel-btn"
                            class="btn btn-outline-secondary"
                            type="button">
                        Cancel
                    </button>
                    <button id="save-btn"
                            class="btn btn-primary"
                            type="button"
                            data-template-id="@Model.Template.Id">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>